{"alert_action_builder": {"modular_alerts": []}, "basic_builder": {"appname": "TA-microsoft-public-ip-generic", "friendly_name": "Microsoft public ip generic", "version": "1.0.6", "author": "Vignesh Narendran", "description": "This information is typically used for threat detection.\n\nThis app is capable of downloading file from Microsoft site and index them splitting into events.\nWebsite format: https://www.microsoft.com/en-us/download/details.aspx?id=", "theme": "#65A637", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAtJJREFUWEftmDtoVEEUhr+5k81u1k2IJlrk1SREi4APDGoKIYj4IEa0sFQbC7GwsLSyTiMkpUmhICoSMGgnKgiKxigYRNFGo6DGEIXdZB/3zhy5u2uiuYvuLcRFdpoLM3N+vvnvzJnDKPGMYB1AyEWylGoKle8WJDBcSwbPRPF0HTFTMvyXTl9BBJQvqcBi0U4OEYVIBJUTK8mZ5+jJ29S4daWBlEIphbU2MK6Vxd25B5WoZ+rTWGkin8BveQpZBkJhVRbH1tLZeISW5k5URkS+PrxCw/nTuLJ2SVCKIj7IskjBqbxbxfHGVJRvQ0Nk10UZeb6n4GUhJP/1pzlOwY4fC/I1/XjfeRtZwDFx9rVPsK2zH5WzRuzdCezwGYzj/7qQTWfJnb3JQts8Y8/2LgeroJullB2rcbVmsO0aW7r2VoECJvkO5RyHA61X2dq9vzIcqnwgc2cCGamgTV0ZQFfZ0rWvsIf+NVBgD/1roEAeqgL9lI1KZuqqQ79zKClW9L1b6OGTGEmEvFmhxkmzeG6MVEuG0SeDoeIlXxoYFmNwuPkGvd0DqKR4wvwc0Y/vi/VKKE2MB6p9M27NLJ/si2LtUa6GImI9tNdIU2Q90YYESlIi4iZ5bWtB58pVWprneJrWWJbP8dV0pF6FAnKwKJUCV5OMbmJVDJT1snLxrcvxSQ9doiL8E6E4MR70JdlW9xL7dPefpgdve1zwEsz1jLOmfVcVqOpQdQ8FHPj/T5kYVy69y3H0kVsZeajigKqZesWxcCr+6vA8Vy6/XeDYoxoUZTzwrFihrUsxvdHQU/8ZM9UfMjEKmjSuo0h3j5PoGEBZ18johwwnJiHipkMK+pVDEw93zLI9Pg2PD4aL919IsgmIfWF2w32aO/pQxhOZmv3K9RlY1PFwgkDUZjjVFac9+gYzc6H41laujKBVmqxtxG05RH1DL8oYE3ynK1fvL8z7DnZn9NvcwSwVAAAAAElFTkSuQmCC", "visible": true, "tab_version": "4.1.3", "tab_build_no": "0", "build_no": 8}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "info:public:ip", "interval": "6000", "use_external_validation": true, "streaming_mode_xml": true, "name": "microsoft_public_ip", "title": "microsoft_public_ip", "description": "", "type": "customized", "parameters": [{"name": "download_url_id", "label": "Download URL ID", "help_string": "https://www.microsoft.com/en-us/download/confirmation.aspx?id=", "required": true, "format_type": "text", "default_value": "", "placeholder": "ID=", "type": "text", "value": "41653"}, {"name": "file_format", "label": "File format", "help_string": "RAW - for any other file types ||||||||||||||||||||\nCSV - assumes the file will have header row", "required": true, "possible_values": [{"value": "json", "label": "JSON"}, {"value": "csv", "label": "CSV"}, {"label": "XML", "value": "xml"}, {"label": "RAW", "value": "raw"}], "format_type": "dropdownlist", "default_value": "", "placeholder": "", "type": "dropdownlist", "value": "xml"}, {"name": "url_region", "label": "URL region", "help_string": "URL segment en-us | en-in", "required": false, "possible_values": [{"value": "in", "label": "IN"}, {"value": "us", "label": "US"}], "format_type": "dropdownlist", "default_value": "in", "placeholder": "", "type": "dropdownlist", "value": "in"}], "data_inputs_options": [{"type": "customized_var", "name": "download_url_id", "title": "Download URL ID", "description": "https://www.microsoft.com/en-us/download/confirmation.aspx?id=", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": "ID="}, {"type": "customized_var", "name": "file_format", "title": "File format", "description": "RAW - for any other file types ||||||||||||||||||||\nCSV - assumes the file will have header row", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "json", "label": "JSON"}, {"value": "csv", "label": "CSV"}, {"label": "XML", "value": "xml"}, {"label": "RAW", "value": "raw"}], "format_type": "dropdownlist", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "url_region", "title": "URL region", "description": "URL segment en-us | en-in", "required_on_edit": false, "required_on_create": false, "possible_values": [{"value": "in", "label": "IN"}, {"value": "us", "label": "US"}], "format_type": "dropdownlist", "default_value": "in", "placeholder": ""}], "code": "# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nfrom lxml import html\nimport json\nimport csv\nfrom urllib.parse import urlsplit\nimport xml.etree.ElementTree as ET\n\ndef validate_input(helper, definition):\n    parameters = definition.parameters\n    input_value = parameters.get('download_url_id', None)\n    pass\n\ndef is_https_url(url):\n    parsed_url = urlsplit(url)\n    return parsed_url.scheme == 'https'\n    \ndef get_download_link(helper,url):\n\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36'\n    }\n    \n    try:\n        response = helper.send_http_request(url, \"GET\", headers=headers, timeout=120, verify=False)\n        response.raise_for_status()\n        tree = html.fromstring(response.content)\n        element = tree.xpath('//a[@data-bi-id=\"downloadretry\"]')\n        deep_link = element[0].attrib[\"href\"]\n        helper.log_debug(\"Check deeplink is https : {}\".format(deep_link))\n        \n        if (is_https_url(deep_link)):\n            return deep_link\n        \n    except Exception as e:\n        helper.log_error(\"Exception on getting deep_link : {}\".format(e))\n        os._exit(1)\n\n\ndef index_events(helper,ew,item):\n\n    index=helper.get_arg('index')\n    input_name = helper.get_input_stanza_names()\n    sourcetype = helper.get_sourcetype()\n    source = \"microsoft://{}\".format(input_name).lower()\n    host = 'localhost'\n    # helper.log_debug(items)\n\n    helper.log_debug(\"Indexing item {}\".format(item))\n    event=helper.new_event(\n        item,\n        time=datetime.datetime.now(),\n        host=host,\n        index=index,\n        source=source,\n        sourcetype=sourcetype,\n        done=True,\n        unbroken=True\n    )\n    ew.write_event(event)\n    return\n\ndef index_json(helper,ew,response):\n    index_counter=0\n    helper.log_debug(\"JSON : {} \".format(response.text))\n    obj = response.json()\n    items = obj.get(\"values\",[])\n    for i in items:\n        index_counter+=1\n        text=json.dumps(i)\n        index_events(helper,ew,text)\n    helper.log_info(\"Indexed {} events into index={} sourcetype={} source={}\".format(index_counter,helper.get_arg('index'),helper.get_sourcetype(),\"Microsoft://{}\".format(helper.get_input_stanza_names())))\n    return\n\ndef index_csv(helper,ew,response):\n    \n    index_counter=0\n    csv=response.text\n    rows = csv.split('\\n')\n    fieldnames = rows[0].split(',')\n    json_data = []\n    for row in rows [1:(len(rows)-1)]:\n        data = {}\n        for i, value in enumerate(row.split(',')):\n            data[fieldnames[i].strip()]=value.strip()\n            index_counter+=1\n            helper.log_debug(\"fieldname :\\\"{}\\\": \\\"value : \\\"{}\\\"\".format(fieldnames[i].strip(),value.strip()))\n\n        helper.log_debug(\"csv_json_converted_event: {}\".format(data))\n        index_events(helper,ew,\"{}\".format(json.dumps(data)))\n    helper.log_info(\"Indexed {} events into index={} sourcetype={} source={}\".format(index_counter,helper.get_arg('index'),helper.get_sourcetype(),\"Microsoft://{}\".format(helper.get_input_stanza_names())))\n    return\n\ndef index_xml(helper, ew, response):\n    \n    index_counter = 0\n\n    xml_tree = ET.fromstring(response.text)\n    json_data = {}\n\n    for region in xml_tree.findall('Region'):\n        region_name = region.get('Name')\n        ip_ranges = []\n        index_counter += 1\n        \n        for ip_range in region.findall('IpRange'):\n            subnet = ip_range.get('Subnet')\n            ip_ranges.append(subnet)\n        json_data[region_name] = ip_ranges\n\n    helper.log_debug(\"xml_json_converted_event: {}\".format(json.dumps(json_data)))\n    index_events(helper,ew,\"{}\".format(json.dumps(json_data)))\n\n    helper.log_info(\"Indexed {} events into index={} sourcetype={} source={}\".format(\n      index_counter, helper.get_arg('index'), helper.get_sourcetype(),\n      \"Microsoft://{}\".format(helper.get_input_stanza_names())))\n    return\n\ndef download_data(helper,deep_link):\n    try:\n        helper.log_info(\"Download file initiated : {}\".format(deep_link))\n        response = helper.send_http_request(deep_link, \"GET\", timeout=200,verify=False)\n    \n    except Exception as e:\n        helper.log_error(\"Exception while downloading : {}\".format(e))\n        os._exit(1)\n    return response\n    \ndef collect_events(helper, ew):\n\n    url=\"https://www.microsoft.com/en-{}/download/confirmation.aspx?id={}\".format(helper.get_arg('url_region'),helper.get_arg('download_url_id'))\n\n    deep_link=get_download_link(helper,url)\n    response=download_data(helper,deep_link)\n    try:\n        file_format_local=helper.get_arg('file_format')\n\n        if file_format_local.lower() == 'json':\n            index_json(helper,ew,response)\n        elif file_format_local.lower() == 'csv':\n            index_csv(helper,ew,response)\n        elif file_format_local.lower() == 'xml':\n            index_xml(helper,ew,response)\n        else:\n            index_events(helper,ew,response.text)\n            helper.log_info(\"Indexed raw events into index={} sourcetype={} source={}\".format(helper.get_arg('index'),helper.get_sourcetype(),\"Microsoft://{}\".format(helper.get_input_stanza_names())))\n                \n    except Exception as e:\n        helper.log_error(\"Exception while indexing : {}\".format(e))\n        os._exit(1)\n", "customized_options": [{"name": "download_url_id", "value": "57063"}, {"name": "file_format", "value": "json"}, {"name": "url_region", "value": "in"}], "uuid": "dc9b4f7fb4074fcf868a1ba6f846878f", "sample_count": "448618"}]}, "field_extraction_builder": {"info:public:ip": {"is_parsed": true, "data_format": "json"}}, "global_settings_builder": {"global_settings": {"proxy_settings": {"proxy_type": "http", "proxy_enabled": false, "proxy_url": "", "proxy_port": ""}, "log_settings": {"log_level": "DEBUG"}}}, "sourcetype_builder": {"info:public:ip": {"metadata": {"event_count": 0, "data_input_name": "microsoft_public_ip", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_started", "validation_id": "v_1687103991_91"}}